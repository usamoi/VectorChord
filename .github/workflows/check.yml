name: Check

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  style:
    runs-on: "ubuntu-24.04"

    steps:
      - name: Set up Environment
        run: |
          rustup update

          curl -fsSL https://github.com/tamasfe/taplo/releases/latest/download/taplo-full-linux-$(uname -m).gz | gzip -d - | install -m 755 /dev/stdin /usr/local/bin/taplo

          curl -fsSL https://github.com/EmbarkStudios/cargo-deny/releases/download/0.18.2/cargo-deny-0.18.2-$(uname -m)-unknown-linux-musl.tar.gz | tar -xOzf - cargo-deny-0.18.2-$(uname -m)-unknown-linux-musl/cargo-deny | install -m 755 /dev/stdin /usr/local/bin/cargo-deny

      - name: Checkout
        uses: actions/checkout@v4

      - name: Typos
        uses: crate-ci/typos@master

      - name: Taplo
        run: taplo fmt --check

      - name: Ruff
        uses: astral-sh/ruff-action@v1

      - name: Rustfmt
        run: cargo fmt --check -- --config-path /dev/null --config imports_granularity=Module

      - name: Deny
        run: cargo deny check

      - name: License Header
        run: |
          HEADER=$(cat <<EOF
          This software is licensed under a dual license model:

          GNU Affero General Public License v3 (AGPLv3): You may use, modify, and
          distribute this software under the terms of the AGPLv3.

          Elastic License v2 (ELv2): You may also use, modify, and distribute this
          software under the Elastic License v2, which has specific restrictions.

          We welcome any commercial collaboration or support. For inquiries
          regarding the licenses, please contact us at:
          vectorchord-inquiry@tensorchord.ai

          Copyright (c) 2025 TensorChord Inc.
          EOF
          )
          COUNT=$(echo "$HEADER" | wc -l)

          RS_HEADER=$(echo "$HEADER" | awk '{ if ($0 ~ /^$/) print "//"; else print "// " $0 }')
          C_HEADER=$(echo "$HEADER" | awk '{ if ($0 ~ /^$/) print "//"; else print "// " $0 }')
          PY_HEADER=$(echo "$HEADER" | awk '{ if ($0 ~ /^$/) print "#"; else print "# " $0 }')

          RS_FILES=$(find . -type f -name "*.rs" -not -path "./target/*")
          C_FILES=$(find . -type f -name "*.c" -not -path "./target/*")
          PY_FILES=$(find . -type f -name "*.py" -not -path "./target/*")

          FLAG="0"

          for p in $RS_FILES; do
            if ! head -n "$COUNT" "$p" | cmp -s - <(echo "$RS_HEADER"); then
              echo "license header mismatch in file $p"
              FLAG="1"
            fi
          done

          for p in $C_FILES; do
            if ! head -n "$COUNT" "$p" | cmp -s - <(echo "$C_HEADER"); then
              echo "license header mismatch in file $p"
              FLAG="1"
            fi
          done

          for p in $PY_FILES; do
            if ! head -n "$COUNT" "$p" | cmp -s - <(echo "$PY_HEADER"); then
              echo "license header mismatch in file $p"
              FLAG="1"
            fi
          done

          if [ "$FLAG" -eq "1" ]; then
            exit 1
          fi

      - name: SQL
        run: |
          ! grep -P '\t' -r ./sql

  lint:
    strategy:
      matrix:
        arch: ["x86_64", "aarch64"]
    runs-on: ${{ matrix.arch == 'x86_64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}

    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTUP_AUTO_INSTALL: "0"
      RUSTC_WRAPPER: "sccache"
      RUSTFLAGS: "-Dwarnings"
      CARGO_TERM_COLOR: "always"
      RUST_BACKTRACE: "1"

    steps:
      - name: Set up Environment
        run: |
          rustup update

          sudo apt-get update

          if [ "$(uname -m)" == "x86_64" ]; then
            wget https://downloadmirror.intel.com/843185/sde-external-9.48.0-2024-11-25-lin.tar.xz -O /tmp/sde-external.tar.xz
            sudo tar -xf /tmp/sde-external.tar.xz -C /opt
            sudo mv /opt/sde-external-9.48.0-2024-11-25-lin /opt/sde
          fi

          if [ "$(uname -m)" == "aarch64" ]; then
            sudo apt-get install -y qemu-user-static
          fi

      - name: Set up Sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Checkout
        uses: actions/checkout@v4

      - name: Clippy
        run: cargo clippy --locked --workspace --exclude vchord

      - name: Cargo Test
        run: cargo test --locked --workspace --exclude vchord --exclude simd --no-fail-fast

      - name: Cargo Test (simd)
        run: |
          if [ "$(uname -m)" == "x86_64" ]; then
            cargo \
              --config 'target.'\''cfg(all())'\''.runner = ["/opt/sde/sde64", "-spr", "--"]' \
              test --locked -p simd -- --no-capture
          fi
          if [ "$(uname -m)" == "aarch64" ]; then
            cargo \
              --config 'target.'\''cfg(all())'\''.runner = ["qemu-aarch64-static", "-cpu", "max,sve-default-vector-length=16"]' \
              test --locked -p simd -- --no-capture
            cargo \
              --config 'target.'\''cfg(all())'\''.runner = ["qemu-aarch64-static", "-cpu", "max,sve-default-vector-length=32"]' \
              test --locked -p simd -- --no-capture
            cargo \
              --config 'target.'\''cfg(all())'\''.runner = ["qemu-aarch64-static", "-cpu", "max,sve-default-vector-length=64"]' \
              test --locked -p simd -- --no-capture
          fi

  psql:
    if: |
      (github.event_name == 'push' && !contains(github.event.head_commit.message, 'job: -psql')) ||
      (github.event_name == 'pull_request' && !contains(github.event.pull_request.body, 'job: -psql')) ||
      github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        version: ["13", "14", "15", "16", "17", "18"]
        arch: ["x86_64", "aarch64"]
    runs-on: ${{ matrix.arch == 'x86_64' && 'ubuntu-22.04' || 'ubuntu-22.04-arm' }}

    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTUP_AUTO_INSTALL: "0"
      RUSTC_WRAPPER: "sccache"
      RUSTFLAGS: "-Dwarnings"
      CARGO_TERM_COLOR: "always"
      RUST_BACKTRACE: "1"

    steps:
      - name: Set up Environment
        run: |
          rustup update
          if [ "${{ matrix.version }}" = "13" ]; then
            rustup default beta
            rustup component add clippy rustfmt
          fi

          sudo apt-get remove -y '^postgres.*' '^libpq.*'
          sudo apt-get purge -y '^postgres.*' '^libpq.*'

          curl --proto '=https' --tlsv1.2 -sSf https://apt.llvm.org/llvm.sh | sudo bash -s -- 18
          sudo update-alternatives --install /usr/bin/clang clang $(which clang-18) 255

          sudo apt-get update
          sudo apt-get install -y postgresql-common
          sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -y

          sudo apt-get update
          sudo apt-get install -y postgresql-server-dev-${{ matrix.version }}
          echo PGRX_PG_CONFIG_PATH=pg_config >> $GITHUB_ENV
          echo PG_CONFIG=pg_config >> $GITHUB_ENV

          sudo apt-get install -y postgresql-${{ matrix.version }} postgresql-${{ matrix.version }}-pgvector
          echo "local all all trust" | sudo tee /etc/postgresql/${{ matrix.version }}/main/pg_hba.conf
          echo "host all all 127.0.0.1/32 trust" | sudo tee -a /etc/postgresql/${{ matrix.version }}/main/pg_hba.conf
          echo "host all all ::1/128 trust" | sudo tee -a /etc/postgresql/${{ matrix.version }}/main/pg_hba.conf
          sudo -iu postgres createuser -s -r $USER
          sudo -iu postgres createdb -O $USER $USER
          sudo -iu postgres psql -c 'ALTER SYSTEM SET shared_preload_libraries = "vchord"'
          sudo systemctl stop postgresql

          curl -fsSL https://github.com/risinglightdb/sqllogictest-rs/releases/download/v0.26.4/sqllogictest-bin-v0.26.4-$(uname -m)-unknown-linux-musl.tar.gz | tar -xOzf - ./sqllogictest | install -m 755 /dev/stdin /usr/local/bin/sqllogictest

      - name: Set up Sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Checkout
        uses: actions/checkout@v4

      - name: Clippy
        run: cargo clippy --locked --target ${{ matrix.arch }}-unknown-linux-gnu -p vchord --features pg${{ matrix.version }} --no-deps

      - name: Install
        run: |
          make PG_CONFIG=$PG_CONFIG PROFILE=dev build
          sudo make PG_CONFIG=$PG_CONFIG install

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: postgresql-${{ matrix.version }}-vchord_0.0.0_${{ matrix.arch }}-linux-gnu
          path: ./build/raw
          compression-level: 9
          retention-days: 14

      - name: Service
        run: |
          sudo systemctl start postgresql
          psql -c 'CREATE EXTENSION IF NOT EXISTS vchord CASCADE;'

      - name: Sqllogictest
        run: |
          sqllogictest --db $USER --user $USER './tests/general/*.slt' --label pg${{ matrix.version }}
          sqllogictest --db $USER --user $USER './tests/vchordg/*.slt' --label pg${{ matrix.version }}
          sqllogictest --db $USER --user $USER './tests/vchordrq/*.slt' --label pg${{ matrix.version }}
          if [ "${{ matrix.version }}" -ge "17" ]; then
            sqllogictest --db $USER --user $USER './tests/vchordrq/pg17/*.slt' --label pg${{ matrix.version }}
          fi

  psql_macos:
    if: |
      (github.event_name == 'push' && contains(github.event.head_commit.message, 'job: +psql_macos')) ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.body, 'job: +psql_macos')) ||
      github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        version: ["13", "14", "15", "16", "17", "18"]
        arch: ["aarch64", "x86_64"]

    runs-on: ${{ matrix.arch == 'aarch64' && 'macos-15' || 'macos-15-intel' }}

    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTUP_AUTO_INSTALL: "0"
      RUSTC_WRAPPER: "sccache"
      RUSTFLAGS: "-Dwarnings"
      CARGO_TERM_COLOR: "always"
      RUST_BACKTRACE: "1"

    steps:
      - name: Set up Environment
        run: |
          rustup update

          brew update

          echo CC=$(brew --prefix llvm@18)/bin/clang >> $GITHUB_ENV

          HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install postgresql@${{ matrix.version }}
          brew services start postgresql@${{ matrix.version }}
          for i in {1..60}; do [ -S /tmp/.s.PGSQL.5432 ] && echo "PostgreSQL ready" && break || sleep 1; done
          [ -S /tmp/.s.PGSQL.5432 ] || echo "PostgreSQL socket not found after 60 seconds"
          $(brew --prefix postgresql@${{ matrix.version }})/bin/createdb -O $USER $USER
          $(brew --prefix postgresql@${{ matrix.version }})/bin/psql -c 'ALTER SYSTEM SET shared_preload_libraries = "vchord"'
          brew services stop postgresql@${{ matrix.version }}
          echo PGRX_PG_CONFIG_PATH=$(brew --prefix postgresql@${{ matrix.version }})/bin/pg_config >> $GITHUB_ENV
          echo PG_CONFIG=$(brew --prefix postgresql@${{ matrix.version }})/bin/pg_config >> $GITHUB_ENV

          mkdir ~/pgvector-install
          curl -fsSL https://github.com/pgvector/pgvector/archive/refs/tags/v0.8.1.tar.gz | tar -xz -C ~/pgvector-install
          make -C ~/pgvector-install/pgvector-0.8.1 PG_CONFIG=$(brew --prefix postgresql@${{ matrix.version }})/bin/pg_config
          sudo make -C ~/pgvector-install/pgvector-0.8.1 PG_CONFIG=$(brew --prefix postgresql@${{ matrix.version }})/bin/pg_config install

          curl -fsSL https://github.com/risinglightdb/sqllogictest-rs/releases/download/v0.26.4/sqllogictest-bin-v0.26.4-${{ matrix.arch }}-apple-darwin.tar.gz | tar -xOzf - ./sqllogictest | tee /usr/local/bin/sqllogictest > /dev/null && chmod 755 /usr/local/bin/sqllogictest

      - name: Set up Sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Checkout
        uses: actions/checkout@v4

      - name: Clippy
        run: |
          cargo clippy --locked -p vchord --target ${{ matrix.arch }}-apple-darwin --features pg${{ matrix.version }} --no-deps

      - name: Install
        run: |
          make PG_CONFIG=$PG_CONFIG PROFILE=dev build
          sudo make PG_CONFIG=$PG_CONFIG install

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: postgresql-${{ matrix.version }}-vchord_0.0.0_${{ matrix.arch }}-apple-darwin
          path: ./build/raw
          compression-level: 9
          retention-days: 14

      - name: Service
        run: |
          brew services start postgresql@${{ matrix.version }}
          for i in {1..60}; do [ -S /tmp/.s.PGSQL.5432 ] && echo "PostgreSQL ready" && break || sleep 1; done
          [ -S /tmp/.s.PGSQL.5432 ] || echo "PostgreSQL socket not found after 60 seconds"
          $(brew --prefix postgresql@${{ matrix.version }})/bin/psql -c 'CREATE EXTENSION IF NOT EXISTS vchord CASCADE;'

      - name: Sqllogictest
        run: |
          sqllogictest --db $USER --user $USER './tests/general/*.slt' --label pg${{ matrix.version }}
          sqllogictest --db $USER --user $USER './tests/vchordg/*.slt' --label pg${{ matrix.version }}
          sqllogictest --db $USER --user $USER './tests/vchordrq/*.slt' --label pg${{ matrix.version }}
          if [ "${{ matrix.version }}" -ge "17" ]; then
            sqllogictest --db $USER --user $USER './tests/vchordrq/pg17/*.slt' --label pg${{ matrix.version }}
          fi

  psql_windows:
    if: |
      (github.event_name == 'push' && contains(github.event.head_commit.message, 'job: +psql_windows')) ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.body, 'job: +psql_windows')) ||
      github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        version: ["13", "14", "15", "16", "17", "18"]
        arch: ["x86_64"]

    runs-on: "windows-2022"

    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTUP_AUTO_INSTALL: "0"
      RUSTC_WRAPPER: "sccache"
      RUSTFLAGS: "-Dwarnings"
      CARGO_TERM_COLOR: "always"
      RUST_BACKTRACE: "1"

    steps:
      - name: Set up Environment
        run: |
          'PGBIN','PGDATA','PGROOT', 'PGUSER', 'PGPASSWORD' | ForEach-Object { Remove-Item "env:$_" }

          rustup update

          & 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Launch-VsDevShell.ps1' -HostArch amd64 -Arch amd64

          if ( "${{ matrix.version }}" -eq "13" ) {
            $postgresql_url = "https://get.enterprisedb.com/postgresql/postgresql-13.22-1-windows-x64-binaries.zip"
          }
          if ( "${{ matrix.version }}" -eq "14" ) {
            $postgresql_url = "https://get.enterprisedb.com/postgresql/postgresql-14.19-1-windows-x64-binaries.zip"
          }
          if ( "${{ matrix.version }}" -eq "15" ) {
            $postgresql_url = "https://get.enterprisedb.com/postgresql/postgresql-15.14-1-windows-x64-binaries.zip"
          }
          if ( "${{ matrix.version }}" -eq "16" ) {
            $postgresql_url = "https://get.enterprisedb.com/postgresql/postgresql-16.10-1-windows-x64-binaries.zip"
          }
          if ( "${{ matrix.version }}" -eq "17" ) {
            $postgresql_url = "https://get.enterprisedb.com/postgresql/postgresql-17.6-1-windows-x64-binaries.zip"
          }
          if ( "${{ matrix.version }}" -eq "18" ) {
            $postgresql_url = "https://get.enterprisedb.com/postgresql/postgresql-18.0-1-windows-x64-binaries.zip"
          }
          Invoke-WebRequest -Uri $postgresql_url -OutFile "$env:TEMP\postgresql-install.zip"
          Expand-Archive -Path "$env:TEMP\postgresql-install.zip" -DestinationPath "D:\postgresql-install" -Force
          Add-Content -Path $env:GITHUB_ENV -Value "PGRX_PG_CONFIG_PATH=D:\postgresql-install\pgsql\bin\pg_config.exe"
          Add-Content -Path $env:GITHUB_ENV -Value "PG_CONFIG=D:\postgresql-install\pgsql\bin\pg_config.exe"
          D:\postgresql-install\pgsql\bin\initdb.exe -D D:\postgresql-install\pgsql\data -U postgres
          D:\postgresql-install\pgsql\bin\pg_ctl.exe start -D D:\postgresql-install\pgsql\data
          D:\postgresql-install\pgsql\bin\createuser.exe -U postgres -s -r $env:USERNAME
          D:\postgresql-install\pgsql\bin\createdb.exe -O $env:USERNAME $env:USERNAME
          D:\postgresql-install\pgsql\bin\psql.exe -c 'ALTER SYSTEM SET shared_preload_libraries = "vchord"'
          D:\postgresql-install\pgsql\bin\pg_ctl.exe stop -D D:\postgresql-install\pgsql\data

          Invoke-WebRequest -Uri "https://github.com/pgvector/pgvector/archive/refs/tags/v0.8.1.zip" -OutFile "$env:TEMP\pgvector-install.zip"
          Expand-Archive -Path "$env:TEMP\pgvector-install.zip" -DestinationPath "D:\pgvector-install" -Force
          Push-Location -Path D:\pgvector-install\pgvector-0.8.1
          nmake /F Makefile.win PGROOT="D:\postgresql-install\pgsql"
          nmake /F Makefile.win PGROOT="D:\postgresql-install\pgsql" install
          Pop-Location

          Invoke-WebRequest -Uri https://github.com/risinglightdb/sqllogictest-rs/releases/download/v0.26.4/sqllogictest-bin-v0.26.4-${{ matrix.arch }}-pc-windows-msvc.zip -OutFile "$env:TEMP\sqllogictest-install.zip"
          Expand-Archive -Path "$env:TEMP\sqllogictest-install.zip" -DestinationPath "D:\sqllogictest-install" -Force
          Add-Content -Path $env:GITHUB_PATH -Value "D:\sqllogictest-install"

      - name: Set up Sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Checkout
        uses: actions/checkout@v4

      - name: Clippy
        run: |
          cargo clippy --locked --target ${{ matrix.arch }}-pc-windows-msvc -p vchord --features pg${{ matrix.version }} --no-deps

      - name: Install
        run: |
          make PG_CONFIG=$env:PG_CONFIG PROFILE=dev build
          make PG_CONFIG=$env:PG_CONFIG install

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: postgresql-${{ matrix.version }}-vchord_0.0.0_${{ matrix.arch }}-pc-windows-msvc
          path: ./build/raw
          compression-level: 9
          retention-days: 14

      - name: Service
        run: |
          'PGBIN','PGDATA','PGROOT', 'PGUSER', 'PGPASSWORD' | ForEach-Object { Remove-Item "env:$_" }

          D:\postgresql-install\pgsql\bin\pg_ctl.exe start -D D:\postgresql-install\pgsql\data
          D:\postgresql-install\pgsql\bin\psql.exe -c 'CREATE EXTENSION IF NOT EXISTS vchord CASCADE;'

      - name: Sqllogictest
        run: |
          sqllogictest --db $env:USERNAME --user $env:USERNAME './tests/general/*.slt' --label pg${{ matrix.version }}
          sqllogictest --db $env:USERNAME --user $env:USERNAME './tests/vchordg/*.slt' --label pg${{ matrix.version }}
          sqllogictest --db $env:USERNAME --user $env:USERNAME './tests/vchordrq/*.slt' --label pg${{ matrix.version }}
          if ( "${{ matrix.version }}" -ge "17" ) {
            sqllogictest --db $env:USERNAME --user $env:USERNAME './tests/vchordrq/pg17/*.slt' --label pg${{ matrix.version }}
          }

  psql_alpine:
    if: |
      (github.event_name == 'push' && contains(github.event.head_commit.message, 'job: +psql_alpine')) ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.body, 'job: +psql_alpine')) ||
      github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        version: ["15", "16", "17"]
        arch: ["x86_64", "aarch64"]
    runs-on: ${{ matrix.arch == 'x86_64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    container:
      image: alpine:3.22
      volumes:
        - /opt:/opt:rw,rshared
        - /opt:/__e/node20:ro,rshared
        - /etc/passwd:/etc/passwd:rw,rshared
        - /etc/group:/etc/group:rw,rshared
        - /etc/shadow:/etc/shadow:rw,rshared
        - /etc/gshadow:/etc/gshadow:rw,rshared
        - /etc/sudoers.d/runner:/etc/sudoers.d/runner:rw,rshared
      options: --user 1001 --privileged

    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTUP_AUTO_INSTALL: "0"
      RUSTC_WRAPPER: "sccache"
      # RUSTFLAGS: "-Dwarnings"
      CARGO_TERM_COLOR: "always"
      RUST_BACKTRACE: "1"

    steps:
      - name: Set up Environment
        run: |
          sudo sed -i "/^ID=/s/alpine/NotpineForGHA/" /etc/os-release
          sudo apk add nodejs --update-cache
          sudo mkdir /opt/bin
          sudo ln -s /usr/bin/node /opt/bin/node

          sudo apk add --no-cache sudo curl make zip clang18-dev postgresql${{ matrix.version }} postgresql${{ matrix.version }}-dev

          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.89-beta

          echo PGRX_PG_CONFIG_PATH=/usr/libexec/postgresql${{ matrix.version }}/pg_config >> $GITHUB_ENV
          echo PG_CONFIG=/usr/libexec/postgresql${{ matrix.version }}/pg_config >> $GITHUB_ENV

          sudo install --verbose --directory --owner postgres --group postgres --mode 1777 /var/lib/postgresql
          sudo install --verbose --directory --owner postgres --group postgres --mode 1777 /var/lib/postgresql/data
          sudo install --verbose --directory --owner postgres --group postgres --mode 3777 /run/postgresql
          sudo -iu postgres initdb -D /var/lib/postgresql/data
          sudo -iu postgres pg_ctl start -D /var/lib/postgresql/data
          sudo -iu postgres createuser -s -r $USER
          sudo -iu postgres createdb -O $USER $USER
          sudo -iu postgres psql -d $USER -c 'ALTER SYSTEM SET shared_preload_libraries = "vchord"'
          sudo -iu postgres pg_ctl stop -D /var/lib/postgresql/data

          mkdir ~/pgvector-install
          curl -fsSL https://github.com/pgvector/pgvector/archive/refs/tags/v0.8.1.tar.gz | tar -xz -C ~/pgvector-install
          make -C ~/pgvector-install/pgvector-0.8.1 PG_CONFIG=/usr/libexec/postgresql${{ matrix.version }}/pg_config
          sudo make -C ~/pgvector-install/pgvector-0.8.1 PG_CONFIG=/usr/libexec/postgresql${{ matrix.version }}/pg_config install

          curl -fsSL https://github.com/risinglightdb/sqllogictest-rs/releases/download/v0.26.4/sqllogictest-bin-v0.26.4-$(uname -m)-unknown-linux-musl.tar.gz | tar -xOzf - ./sqllogictest | sudo install -m 755 /dev/stdin /usr/local/bin/sqllogictest

      - name: Set up Sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Checkout
        uses: actions/checkout@v4

      - name: Patch
        run: |
          mkdir ./.cargo && touch ./.cargo/config.toml
          echo "unstable.host-config = true" >> ./.cargo/config.toml
          echo "unstable.target-applies-to-host = true" >> ./.cargo/config.toml
          echo "host.rustflags = [\"-Dwarnings\", \"-Ctarget-feature=-crt-static\"]" >> ./.cargo/config.toml
          echo "build.rustflags = [\"-Dwarnings\", \"-Ctarget-feature=-crt-static\"]" >> ./.cargo/config.toml
          echo RUSTC_BOOTSTRAP=1 >> $GITHUB_ENV

      - name: Clippy
        run: |
          . "$HOME/.cargo/env"
          cargo clippy --locked --target ${{ matrix.arch }}-unknown-linux-musl -p vchord --features pg${{ matrix.version }} --no-deps

      - name: Install
        run: |
          . "$HOME/.cargo/env"
          make PG_CONFIG=$PG_CONFIG PROFILE=dev build
          sudo make PG_CONFIG=$PG_CONFIG install

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: postgresql-${{ matrix.version }}-vchord_0.0.0_${{ matrix.arch }}-linux-musl
          path: ./build/raw
          compression-level: 9
          retention-days: 14

      - name: Service
        run: |
          sudo -iu postgres pg_ctl start -D /var/lib/postgresql/data
          psql -d $USER -U $USER -c 'CREATE EXTENSION IF NOT EXISTS vchord CASCADE;'

      - name: Sqllogictest
        run: |
          sqllogictest --db $USER --user $USER './tests/general/*.slt' --label pg${{ matrix.version }}
          sqllogictest --db $USER --user $USER './tests/vchordg/*.slt' --label pg${{ matrix.version }}
          sqllogictest --db $USER --user $USER './tests/vchordrq/*.slt' --label pg${{ matrix.version }}
          if [ "${{ matrix.version }}" -ge "17" ]; then
            sqllogictest --db $USER --user $USER './tests/vchordrq/pg17/*.slt' --label pg${{ matrix.version }}
          fi

  check_debian:
    if: |
      (github.event_name == 'push' && contains(github.event.head_commit.message, 'job: +check_debian')) ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.body, 'job: +check_debian')) ||
      github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        include:
          - version: "15"
            platform: "s390x"
            clang_triple: "s390x-linux-gnu"
            rust_triple: "s390x-unknown-linux-gnu"
            gcc_version: "12"
            debian_version: "bookworm"
          - version: "17"
            platform: "s390x"
            clang_triple: "s390x-linux-gnu"
            rust_triple: "s390x-unknown-linux-gnu"
            gcc_version: "14"
            debian_version: "trixie"
          - version: "13"
            platform: "ppc64le"
            clang_triple: "powerpc64le-linux-gnu"
            rust_triple: "powerpc64le-unknown-linux-gnu"
            gcc_version: "12"
            debian_version: "bookworm"
          - version: "14"
            platform: "ppc64le"
            clang_triple: "powerpc64le-linux-gnu"
            rust_triple: "powerpc64le-unknown-linux-gnu"
            gcc_version: "12"
            debian_version: "bookworm"
          - version: "15"
            platform: "ppc64le"
            clang_triple: "powerpc64le-linux-gnu"
            rust_triple: "powerpc64le-unknown-linux-gnu"
            gcc_version: "12"
            debian_version: "bookworm"
          - version: "16"
            platform: "ppc64le"
            clang_triple: "powerpc64le-linux-gnu"
            rust_triple: "powerpc64le-unknown-linux-gnu"
            gcc_version: "12"
            debian_version: "bookworm"
          - version: "17"
            platform: "ppc64le"
            clang_triple: "powerpc64le-linux-gnu"
            rust_triple: "powerpc64le-unknown-linux-gnu"
            gcc_version: "12"
            debian_version: "bookworm"
          - version: "18"
            platform: "ppc64le"
            clang_triple: "powerpc64le-linux-gnu"
            rust_triple: "powerpc64le-unknown-linux-gnu"
            gcc_version: "12"
            debian_version: "bookworm"
          - version: "17"
            platform: "riscv64"
            clang_triple: "riscv64-linux-gnu"
            rust_triple: "riscv64gc-unknown-linux-gnu"
            gcc_version: "14"
            debian_version: "trixie"
    runs-on: "ubuntu-24.04"

    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTUP_AUTO_INSTALL: "0"
      RUSTC_WRAPPER: "sccache"
      # RUSTFLAGS: "-Dwarnings"
      CARGO_TERM_COLOR: "always"
      RUST_BACKTRACE: "1"

    steps:
      - name: Set up Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static clang lld
          sudo systemctl enable --now systemd-binfmt
          sudo mkdir /sysroot
          curl -fsSL https://github.com/debuerreotype/docker-debian-artifacts/raw/refs/heads/dist-${{ matrix.platform }}/${{ matrix.debian_version }}/oci/blobs/rootfs.tar.gz | sudo tar -xz -C /sysroot
          sudo mount --bind /dev /sysroot/dev
          sudo mount --bind /dev/pts /sysroot/dev/pts
          sudo mount --bind /etc/resolv.conf /sysroot/etc/resolv.conf
          sudo mount --bind /proc /sysroot/proc
          sudo mount --bind /sys /sysroot/sys
          sudo mount --bind /tmp /sysroot/tmp
          sudo chroot /sysroot apt-get update
          sudo chroot /sysroot apt-get install --no-install-recommends -y libc6-dev libgcc-${{ matrix.gcc_version }}-dev
          sudo chroot /sysroot apt-get install --no-install-recommends -y ca-certificates sudo
          QEMU_LD_PREFIX=/sysroot
          QEMU_CPU=max
          if [ "${{ matrix.platform }}" = "ppc64le" ]; then
            sudo rm -f /sysroot/lib64/ld64.so.2
            sudo ln /sysroot/usr/lib/powerpc64le-linux-gnu/ld64.so.2 /sysroot/lib64/ld64.so.2
            sudo rm -f /sysroot/usr/lib/powerpc64le-linux-gnu/libm.so
            sudo ln /sysroot/lib/powerpc64le-linux-gnu/libm.so.6 /sysroot/usr/lib/powerpc64le-linux-gnu/libm.so
            QEMU_CPU=power10
          fi
          export QEMU_LD_PREFIX
          export QEMU_CPU
          echo QEMU_LD_PREFIX=$QEMU_LD_PREFIX >> $GITHUB_ENV
          echo QEMU_CPU=$QEMU_CPU >> $GITHUB_ENV
          echo "Defaults env_keep += \"QEMU_CPU\"" | sudo tee -a /etc/sudoers

          sudo apt-get remove -y '^postgres.*' '^libpq.*'
          sudo apt-get purge -y '^postgres.*' '^libpq.*'
          sudo chroot /sysroot apt-get update
          sudo chroot /sysroot apt-get install --no-install-recommends -y postgresql-common
          sudo chroot /sysroot /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -y
          sudo chroot /sysroot apt-get install --no-install-recommends -y postgresql-${{ matrix.version }} postgresql-server-dev-${{ matrix.version }}
          sudo touch /usr/bin/pg_config
          echo "#!/usr/bin/env bash" | sudo tee -a /usr/bin/pg_config
          echo "sudo chroot /sysroot pg_config \"\$@\" \\" | sudo tee -a /usr/bin/pg_config
          echo "    | sed -E 's|^/(.*)$|/sysroot/\1|' \\" | sudo tee -a /usr/bin/pg_config
          echo "    | sed -E 's|^([A-Z]+) = /(.*)$|\1 = /sysroot/\2|'" | sudo tee -a /usr/bin/pg_config
          sudo chmod 755 /usr/bin/pg_config
          pg_config

          echo "local all all trust" | sudo tee /sysroot/etc/postgresql/${{ matrix.version }}/main/pg_hba.conf
          echo "host all all 127.0.0.1/32 trust" | sudo tee -a /sysroot/etc/postgresql/${{ matrix.version }}/main/pg_hba.conf
          echo "host all all ::1/128 trust" | sudo tee -a /sysroot/etc/postgresql/${{ matrix.version }}/main/pg_hba.conf
          sudo chroot /sysroot pg_ctlcluster ${{ matrix.version }} main start
          sudo chroot /sysroot sudo -iu postgres createuser -s -r $USER
          sudo chroot /sysroot sudo -iu postgres createdb -O $USER $USER
          sudo chroot /sysroot sudo -iu postgres psql -d $USER -c 'ALTER SYSTEM SET shared_preload_libraries = "vchord"'
          sudo chroot /sysroot pg_ctlcluster ${{ matrix.version }} main stop

          mkdir ~/pgvector-install
          curl -fsSL https://github.com/pgvector/pgvector/archive/refs/tags/v0.8.1.tar.gz | tar -xz -C ~/pgvector-install
          make -C ~/pgvector-install/pgvector-0.8.1 with_llvm=no CC=clang CFLAGS="-fuse-ld=lld --target=${{ matrix.clang_triple }} --sysroot=/sysroot" OPTFLAGS=""
          sudo make -C ~/pgvector-install/pgvector-0.8.1 with_llvm=no CC=clang CFLAGS="-fuse-ld=lld --target=${{ matrix.clang_triple }} --sysroot=/sysroot" OPTFLAGS="" install

          curl -fsSL https://github.com/risinglightdb/sqllogictest-rs/releases/download/v0.26.4/sqllogictest-bin-v0.26.4-$(uname -m)-unknown-linux-musl.tar.gz | tar -xOzf - ./sqllogictest | install -m 755 /dev/stdin /usr/local/bin/sqllogictest

      - name: Set up Sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Checkout
        uses: actions/checkout@v4

      - name: Patch
        run: |
          cat << EOF > rust-toolchain.toml
          [toolchain]
          channel = "nightly-2025-08-29"
          components = ["rustfmt", "clippy"]
          targets = ["${{ matrix.rust_triple }}"]
          profile = "minimal"
          EOF
          mkdir -p .cargo
          cat << EOF > .cargo/config.toml
          [target.${{ matrix.rust_triple }}]
          runner = ["qemu-${{ matrix.platform }}-static"]
          linker = "clang"
          rustflags = [
              "-Clink-arg=-fuse-ld=lld",
              "-Clink-arg=--target=${{ matrix.clang_triple }}",
              "-Clink-arg=--sysroot=/sysroot",
              "-Dwarnings",
          ]
          [env]
          CC_${{ matrix.rust_triple }} = "clang"
          CFLAGS_${{ matrix.rust_triple }} = "--target=${{ matrix.clang_triple }} --sysroot=/sysroot"
          BINDGEN_EXTRA_CLANG_ARGS_${{ matrix.rust_triple }} = "--sysroot=/sysroot"
          [patch.crates-io]
          pgrx = { git = "https://github.com/tensorchord/pgrx.git", branch = "big-endian" }
          EOF
          rustup toolchain install

      - name: Clippy & Test
        run: |
          PGRX_PG_CONFIG_PATH=pg_config \
            cargo clippy --target ${{ matrix.rust_triple }} \
            --workspace --features pg${{ matrix.version }}
          PGRX_PG_CONFIG_PATH=pg_config \
            cargo test --target ${{ matrix.rust_triple }} \
            --workspace --exclude vchord  --no-fail-fast \
            -- --no-capture

      - name: Install
        run: |
          make \
            TARGET=${{ matrix.rust_triple }} \
            PROFILE=dev \
            RUNNER='qemu-${{ matrix.platform }}-static' \
            build
          sudo make install

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: postgresql-${{ matrix.version }}-vchord_0.0.0_${{ matrix.clang_triple }}
          path: ./build/raw
          compression-level: 9
          retention-days: 14

      - name: Service
        run: |
          sudo chroot /sysroot pg_ctlcluster ${{ matrix.version }} main start
          sudo chroot /sysroot psql -d $USER -U $USER -c 'CREATE EXTENSION IF NOT EXISTS vchord CASCADE;'

      - name: Sqllogictest
        run: |
          sqllogictest --db $USER --user $USER './tests/general/*.slt' --label pg${{ matrix.version }}
          sqllogictest --db $USER --user $USER './tests/vchordg/*.slt' --label pg${{ matrix.version }}
          sqllogictest --db $USER --user $USER './tests/vchordrq/*.slt' --label pg${{ matrix.version }}
          if [ "${{ matrix.version }}" -ge "17" ]; then
            sqllogictest --db $USER --user $USER './tests/vchordrq/pg17/*.slt' --label pg${{ matrix.version }}
          fi
